(function (e) { "use strict"; var t, n, r; t = function (e) { if (!Array.remove) { Array.prototype.remove = function (e, t) { if (typeof e !== "number" || typeof t !== "number") return this; var n = this.slice((t || e) + 1 || this.length); this.length = e < 0 ? this.length + e : e; return this.push.apply(this, n) } } this.baseUri = e; this.OrderBySettings = { Property: null, Order: null, DefaultProperty: null, DefaultOrder: null, toString: function () { var e = "$orderby=" + (this.Property || this.DefaultProperty); if (this.DefaultOrder !== null || this.Order !== null) { e += " " + (this.Order || this.DefaultOrder) } return e }, reset: function () { this.Property = null; this.Order = null }, isSet: function () { return this.Property !== null || this.DefaultProperty !== null } }; this.TopSettings = { Top: null, DefaultTop: null, toString: function () { return "$top=" + (this.Top !== null ? this.Top : this.DefaultTop) }, reset: function () { this.Top = null }, isSet: function () { return this.Top !== null || this.DefaultTop !== null } }; this.SkipSettings = { Skip: null, DefaultSkip: null, toString: function () { return "$skip=" + (this.Skip !== null ? this.Skip : this.DefaultSkip) }, reset: function () { this.Skip = null }, isSet: function () { return this.Skip !== null || this.DefaultSkip !== null } }; this.SelectSettings = { Select: null, DefaultSelect: null, toString: function () { var e = this.Select || this.DefaultSelect; return "$select=" + e.join(",") }, reset: function () { this.Select = null }, isSet: function () { return this.Select !== null || this.DefaultSelect !== null } }; this.ExpandSettings = { Expand: null, DefaultExpand: null, toString: function () { return "$expand=" + (this.Expand || this.DefaultExpand) }, reset: function () { this.Expand = null }, isSet: function () { return this.Expand !== null || this.DefaultExpand !== null } }; this.FormatSettings = { Format: null, DefaultFormat: null, toString: function () { return "$format=" + (this.Format || this.DefaultFormat) }, reset: function () { this.Format = null }, isSet: function () { return this.Format !== null || this.DefaultFormat !== null } }; this.InlineCountSettings = { InlineCount: null, DefaultInlineCount: null, toString: function () { return "$inlinecount=" + (this.InlineCount || this.DefaultInlineCount) }, reset: function () { this.InlineCount = null }, isSet: function () { return this.InlineCount !== null || this.DefaultInlineCount !== null } }; this.FilterSettings = { Filters: [], DefaultFilters: [], CapturedFilter: [], toString: function () { var e, t, n; e = []; n = "$filter="; if (this.DefaultFilters.length > 0) { for (t = 0; t < this.DefaultFilters.length; t++) { e.push(this.DefaultFilters[t]) } } for (t = 0; t < this.Filters.length; t++) { e.push(this.Filters[t]) } for (t = 0; t < e.length; t++) { n += e[t].toString(t) } return n }, reset: function () { this.Filters = []; if (this.CapturedFilter.length > 0) { for (var e = 0; e < this.CapturedFilter.length; e++) { this.Filters.push(this.CapturedFilter[e]) } } }, fullReset: function () { this.Filters = []; this.CapturedFilter = [] }, isSet: function () { return this.Filters.length > 0 || this.DefaultFilters.length > 0 }, loadFromJson: function (e) { var r, i, s, o, u; o = function (e) { var r, i, s; i = new t.PrecedenceGroup; for (r = 0; r < e.clauses.length; r++) { s = e.clauses[r]; i.clauses.push(new n(u(s.filterObj), s.logicalOperator)) } return i }; u = function (e) { if (e.clauses !== undefined) { return o(e) } var n; s = new t.FilterClause; for (n in e) { if (e.hasOwnProperty(n)) { s[n] = e[n] } } return s }; for (r = 0; r < e.Filters.length; r++) { i = e.Filters[r]; this.Filters.push(new n(u(i.filterObj), i.logicalOperator)) } for (r = 0; r < e.DefaultFilters.length; r++) { i = e.DefaultFilters[r]; this.DefaultFilters.push(new n(u(i.filterObj), i.logicalOperator)) } } } }; t.prototype = { baseUri: "", currentHashRoute: "", updateHashRoute: function (e) { this.currentHashRoute = e }, setOrderByDefault: function (e, t) { this.OrderBySettings.DefaultProperty = e; this.OrderBySettings.DefaultOrder = t === undefined ? "desc" : t; return this }, toggleOrderBy: function (e, t) { var n = this.OrderBySettings.Property === null || this.OrderBySettings.Order === "asc"; this.orderBy(e)[n ? "desc" : "asc"](); if (t && typeof t === "function") { t.call(this) } return this }, orderBy: function (e) { this.OrderBySettings.Property = e; return this }, desc: function () { this.OrderBySettings.Order = "desc"; return this }, asc: function () { this.OrderBySettings.Order = "asc"; return this }, resetOrderBy: function () { this.OrderBySettings.reset(); return this }, setTopDefault: function (e) { this.TopSettings.DefaultTop = e; return this }, top: function (e) { this.TopSettings.Top = e; return this }, resetTop: function () { this.TopSettings.reset(); return this }, setSkipDefault: function (e) { this.SkipSettings.DefaultSkip = e; return this }, skip: function (e) { this.SkipSettings.Skip = e; return this }, resetSkip: function () { this.SkipSettings.reset(); return this }, setSelectDefault: function (e) { this.SelectSettings.DefaultSelect = e; return this }, select: function (e) { this.SelectSettings.Select = e; return this }, resetSelect: function () { this.SelectSettings.reset(); return this }, setExpandDefault: function (e) { this.ExpandSettings.DefaultExpand = e; return this }, expand: function (e) { this.ExpandSettings.Expand = e; return this }, resetExpand: function () { this.ExpandSettings.reset() }, formatDefault: function () { var e = this; this.atom = function () { e.FormatSettings.DefaultFormat = "atom"; return e }; this.xml = function () { e.FormatSettings.DefaultFormat = "xml"; return e }; this.json = function () { e.FormatSettings.DefaultFormat = "json"; return e }; this.custom = function (t) { e.FormatSettings.DefaultFormat = t; return e }; return e }, format: function () { var e = this; this.atom = function () { e.FormatSettings.Format = "atom"; return e }; this.xml = function () { e.FormatSettings.Format = "xml"; return e }; this.json = function () { e.FormatSettings.Format = "json"; return e }; this.custom = function (t) { e.FormatSettings.Format = t; return e }; return this }, resetFormat: function () { this.FormatSettings.reset() }, inlineCountDefault: function () { var e = this; this.allPages = function () { e.InlineCountSettings.DefaultInlineCount = "allpages"; return e }; this.none = function () { e.InlineCountSettings.DefaultInlineCount = "none"; return e }; return this }, inlineCount: function () { var e = this; this.allPages = function () { e.InlineCountSettings.InlineCount = "allpages"; return e }; this.none = function () { e.InlineCountSettings.InlineCount = "none"; return e }; return this }, resetInlineCount: function () { this.InlineCountSettings.reset(); return this }, captureFilter: function () { this.FilterSettings.CapturedFilter = []; for (var e = 0; e < this.FilterSettings.Filters.length; e++) { this.FilterSettings.CapturedFilter.push(this.FilterSettings.Filters[e]) } }, resetFilter: function () { this.FilterSettings.fullReset(); return this }, resetToCapturedFilter: function () { this.FilterSettings.reset(); return this }, removeFilter: function (e) { var t; if (!this.FilterSettings.isSet()) { return this } for (t = 0; t < this.FilterSettings.Filters.length; t++) { if (this.FilterSettings.Filters[t].filterObj.Property === e) { this.FilterSettings.Filters.splice(t, 1) } } return this }, defaultFilter: function (e) { this.FilterSettings.DefaultFilters.push(new n(e)); return this }, defaultAndFilter: function (e) { this.FilterSettings.DefaultFilters.push(new n(e, "and")); return this }, defaultOrFilter: function (e) { this.FilterSettings.DefaultFilters.push(new n(e, "or")); return this }, filter: function (e) { this.FilterSettings.Filters.push(new n(e)); return this }, andFilter: function (e) { this.FilterSettings.Filters.push(new n(e, "and")); return this }, orFilter: function (e) { this.FilterSettings.Filters.push(new n(e, "or")); return this }, toString: function () { var e, t; e = this.baseUri; t = []; if (this.OrderBySettings.isSet()) { t.push(this.OrderBySettings.toString()) } if (this.TopSettings.isSet()) { t.push(this.TopSettings.toString()) } if (this.SkipSettings.isSet()) { t.push(this.SkipSettings.toString()) } if (this.SelectSettings.isSet()) { t.push(this.SelectSettings.toString()) } if (this.FilterSettings.isSet()) { t.push(this.FilterSettings.toString()) } if (this.ExpandSettings.isSet()) { t.push(this.ExpandSettings.toString()) } if (this.FormatSettings.isSet()) { t.push(this.FormatSettings.toString()) } if (this.InlineCountSettings.isSet()) { t.push(this.InlineCountSettings.toString()) } return t.length > 0 ? e + "?" + t.join("&") : e }, toJson: function () { var e = {}; e.baseUri = this.baseUri; e.currentHashRoute = this.currentHashRoute; e.OrderBySettings = null; e.TopSettings = null; e.SkipSettings = null; e.SelectSettings = null; e.ExpandSettings = null; e.FormatSettings = null; e.InlineCountSettings = null; e.FilterSettings = null; e.defaults = this.defaults; if (this.OrderBySettings.isSet()) { e.OrderBySettings = this.OrderBySettings } if (this.TopSettings.isSet()) { e.TopSettings = this.TopSettings } if (this.SkipSettings.isSet()) { e.SkipSettings = this.SkipSettings } if (this.SelectSettings.isSet()) { e.SelectSettings = this.SelectSettings } if (this.ExpandSettings.isSet()) { e.ExpandSettings = this.ExpandSettings } if (this.FormatSettings.isSet()) { e.FormatSettings = this.FormatSettings } if (this.InlineCountSettings.isSet()) { e.InlineCountSettings = this.InlineCountSettings } if (this.FilterSettings.isSet()) { e.FilterSettings = this.FilterSettings } return JSON.stringify(e) }, saveLocal: function (e) { var t, n; t = this.toJson(); n = e || "joData.StorageKey"; localStorage.setItem(n, t) } }; t.loadLocal = function (e) { var n, r, i, s, o; n = e || "joData.StorageKey"; r = localStorage.getItem(n); if (r === null) { console.log("Nothing was found in localStorage"); return null } i = JSON.parse(r); s = new t(i.baseUri); s.currentHashRoute = i.currentHashRoute; if (i.OrderBySettings !== null) { for (o in i.OrderBySettings) { if (i.OrderBySettings.hasOwnProperty(o)) { s.OrderBySettings[o] = i.OrderBySettings[o] } } } if (i.TopSettings !== null) { for (o in i.TopSettings) { if (i.TopSettings.hasOwnProperty(o)) { s.TopSettings[o] = i.TopSettings[o] } } } if (i.SkipSettings !== null) { for (o in i.SkipSettings) { if (i.SkipSettings.hasOwnProperty(o)) { s.SkipSettings[o] = i.SkipSettings[o] } } } if (i.SelectSettings !== null) { for (o in i.SelectSettings) { if (i.SelectSettings.hasOwnProperty(o)) { s.SelectSettings[o] = i.SelectSettings[o] } } } if (i.ExpandSettings !== null) { for (o in i.ExpandSettings) { if (i.ExpandSettings.hasOwnProperty(o)) { s.ExpandSettings[o] = i.ExpandSettings[o] } } } if (i.FormatSettings !== null) { for (o in i.FormatSettings) { if (i.FormatSettings.hasOwnProperty(o)) { s.FormatSettings[o] = i.FormatSettings[o] } } } if (i.InlineCountSettings !== null) { for (o in i.InlineCountSettings) { if (i.InlineCountSettings.hasOwnProperty(o)) { s.InlineCountSettings[o] = i.InlineCountSettings[o] } } } if (i.FilterSettings !== null) { s.FilterSettings.loadFromJson(i.FilterSettings) } return s }; n = function (e, t) { this.filterObj = e; this.logicalOperator = null; if (t !== undefined && t !== null) { this.logicalOperator = t } return this }; n.prototype = { filterObj: null, logicalOperator: null, toString: function (e) { var t = ""; if (this.logicalOperator !== null && e > 0) { t += " " + this.logicalOperator + " " } else if (e > 0 && this.logicalOperator === null) { t += " and " } t += this.filterObj.toString(); return t } }; t.PrecedenceGroup = function (e) { if (!e instanceof t.FilterClause) { throw "filterClause must be of type joData.FilterClause!" } this.clauses = []; if (e !== undefined) { this.clauses.push(new n(e)) } return this }; t.PrecedenceGroup.prototype = { clauses: [], isEmpty: function () { return this.clauses.length === 0 }, andFilter: function (e) { if (!e instanceof t.FilterClause) { throw "filterClause must be of type joData.FilterClause!" } this.clauses.push(new n(e, "and")); return this }, orFilter: function (e) { if (!e instanceof t.FilterClause) { throw "filterClause must be of type joData.FilterClause!" } this.clauses.push(new n(e, "or")); return this }, toString: function () { var e, t; e = "("; for (t = 0; t < this.clauses.length; t++) { e += this.clauses[t].toString(t) } e += ")"; return e } }; e.literal = function (e) { return "'" + e.toString() + "'" }; e.datetime = function (e) { return "datetime'" + e + "'" }; e.decimal = function (e) { return e + "m" }; e.guid = function (e) { return "guid'" + e + "'" }; e.single = function (e) { return e + "f" }; e.double = function (e) { return e + "d" }; t.Concat = function (e, t) { this.LeftSide = e; this.RightSide = t; return this }; t.Concat.prototype = { LeftSide: null, RightSide: null, toString: function () { function t(t) { if (typeof t === "object") { return t.toString() } if (typeof t === "function") { return t.call(e) } return t.toString() } var e = this; return "concat(" + t(this.LeftSide) + "," + t(this.RightSide) + ")" } }; t.FilterClause = function (e) { this.Property = e; this.Components = []; return this }; t.FilterClause.prototype = { Property: null, Value: null, IsClauseEmpty: true, PropertyIncluded: false, UsingNot: false, FuncReturnType: null, transformFunc: null, Components: [], toString: function () { var e, t, n; e = []; if (!this.PropertyIncluded) { e.push(this.Property) } for (t = 0; t < this.Components.length; t++) { e.push(this.Components[t]) } n = e.join(" "); if (!this.UsingNot) { return n } return typeof this.FuncReturnType === "boolean" ? "not " + n : "not (" + n + ")" }, isEmpty: function () { return this.IsClauseEmpty || this.PropertyIncluded && this.UsingNot }, add: function (e) { return r.addArithmeticOperator(e, "add", this) }, sub: function (e) { return r.addArithmeticOperator(e, "sub", this) }, mul: function (e) { return r.addArithmeticOperator(e, "mul", this) }, div: function (e) { return r.addArithmeticOperator(e, "div", this) }, mod: function (e) { return r.addArithmeticOperator(e, "mod", this) }, eq: function (e) { return r.addLogicalOperator(e, "eq", this) }, ne: function (e) { return r.addLogicalOperator(e, "ne", this) }, gt: function (e) { return r.addLogicalOperator(e, "gt", this) }, ge: function (e) { return r.addLogicalOperator(e, "ge", this) }, lt: function (e) { return r.addLogicalOperator(e, "lt", this) }, le: function (e) { return r.addLogicalOperator(e, "le", this) }, not: function () { this.UsingNot = true; return this }, substringof: function (e) { this.PropertyIncluded = true; this.FuncReturnType = Boolean(); var t = this; var n = this.Property; if (this.transformFunc !== null) { n = this.Components[this.Components.length - 1]; this.Components.splice(this.Components.length - 1, 1) } this.Components.push("substringof('" + e + "'," + n + ")"); return this }, endswith: function (e) { this.PropertyIncluded = true; this.FuncReturnType = Boolean(); var t = this; this.Components.push("endswith(" + t.Property + ",'" + e + "')"); return this }, startswith: function (e) { this.PropertyIncluded = true; this.FuncReturnType = Boolean(); var t = this; this.Components.push("startswith(" + t.Property + ",'" + e + "')"); return this }, length: function () { this.PropertyIncluded = true; this.FuncReturnType = Number(); var e = this; this.Components.push("length(" + e.Property + ")"); return this }, indexof: function (e) { this.PropertyIncluded = true; this.FuncReturnType = Number(); var t = this; this.Components.push("indexof(" + t.Property + ",'" + e + "')"); return this }, replace: function (e, t) { this.PropertyIncluded = true; this.FuncReturnType = String(); var n = this; this.Components.push("replace(" + n.Property + ",'" + e + "','" + t + "')"); return this }, substring: function (e, t) { this.PropertyIncluded = true; this.FuncReturnType = String(); var n = [this.Property, e]; if (t !== undefined) { n.push(t) } this.Components.push("substring(" + n.join(",") + ")"); return this }, toLower: function () { this.PropertyIncluded = true; this.FuncReturnType = String(); var e = this; this.transformFunc = this.toLower; this.Components.push("tolower(" + e.Property + ")"); return this }, toUpper: function () { this.PropertyIncluded = true; this.FuncReturnType = String(); var e = this; this.transformFunc = this.toUpper; this.Components.push("toupper(" + e.Property + ")"); return this }, trim: function () { this.PropertyIncluded = true; this.FuncReturnType = String(); var e = this; this.transformFunc = this.trim; this.Components.push("trim(" + e.Property + ")"); return this }, Concat: function (e) { this.PropertyIncluded = true; this.FuncReturnType = String(); var t = this; t.Components.push(e.toString()); return this }, day: function () { return r.addMethodWrapper(this, "day") }, hour: function () { return r.addMethodWrapper(this, "hour") }, minute: function () { return r.addMethodWrapper(this, "minute") }, month: function () { return r.addMethodWrapper(this, "month") }, second: function () { return r.addMethodWrapper(this, "second") }, year: function () { return r.addMethodWrapper(this, "year") }, round: function () { return r.addMethodWrapper(this, "round") }, floor: function () { return r.addMethodWrapper(this, "floor") }, ceiling: function () { return r.addMethodWrapper(this, "ceiling") } }; r = { formatValue: function (e) { if (e.length > 8 && e.substring(0, 8) === "datetime") { return e } if (e.length > 4 && e.substring(0, 4) === "guid") { return e } if (typeof e === "string") { var t = ["m", "f", "d"]; for (var n = 0; n < t.length; n++) { var r = t[n]; if (e.indexOf(r, e.length - r.length) !== -1) { var i = e.substring(0, e.length - 1); if (!isNaN(i)) { return e } } } return "'" + e + "'" } return e }, addLogicalOperator: function (e, t, n) { n.Value = e; n.IsClauseEmpty = false; n.Components.push(t + " " + this.formatValue(e)); return n }, addArithmeticOperator: function (e, t, n) { n.Components.push(t + " " + e); return n }, addMethodWrapper: function (e, t) { e.PropertyIncluded = true; e.FuncReturnType = Number(); var n = e; e.Components.push(t + "(" + n.Property + ")"); return e } }; e.joData = t })(window)